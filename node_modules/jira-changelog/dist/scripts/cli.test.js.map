{"version":3,"sources":["../../src/cli.test.js"],"names":["describe","test","range","expect","from","toBe","to","symmetric","toThrow","Error"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,YAAD,EAAe,MAAM;AACzBC,EAAAA,IAAI,CAAC,kCAAD,EAAqC,MAAM;AAC3C,UAAMC,KAAK,GAAG,qBAAW,qBAAX,CAAd;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAP,CAAN,CAAmBC,IAAnB,CAAwB,UAAxB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACI,EAAP,CAAN,CAAiBD,IAAjB,CAAsB,UAAtB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACK,SAAP,CAAN,CAAwBF,IAAxB,CAA6B,IAA7B;AACH,GALG,CAAJ;AAMAJ,EAAAA,IAAI,CAAC,qCAAD,EAAwC,MAAM;AAC9C,UAAMC,KAAK,GAAG,qBAAW,oBAAX,CAAd;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAP,CAAN,CAAmBC,IAAnB,CAAwB,UAAxB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACI,EAAP,CAAN,CAAiBD,IAAjB,CAAsB,UAAtB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACK,SAAP,CAAN,CAAwBF,IAAxB,CAA6B,KAA7B;AACH,GALG,CAAJ;AAMAJ,EAAAA,IAAI,CAAC,eAAD,EAAkB,MAAM;AACxB,UAAMC,KAAK,GAAG,qBAAW,UAAX,CAAd;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAP,CAAN,CAAmBC,IAAnB,CAAwB,UAAxB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACI,EAAP,CAAN,CAAiBD,IAAjB,CAAsB,EAAtB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACK,SAAP,CAAN,CAAwBF,IAAxB,CAA6B,KAA7B;AACH,GALG,CAAJ;AAMAJ,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAC9BE,IAAAA,MAAM,CAAC,MAAM,qBAAW,KAAX,CAAP,CAAN,CAAgCK,OAAhC,CAAwCC,KAAxC;AACH,GAFG,CAAJ;AAGAR,EAAAA,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC7BE,IAAAA,MAAM,CAAC,MAAM,qBAAW,IAAX,CAAP,CAAN,CAA+BK,OAA/B,CAAuCC,KAAvC;AACH,GAFG,CAAJ;AAGAR,EAAAA,IAAI,CAAC,wDAAD,EAA2D,MAAM;AACjE,UAAMC,KAAK,GAAG,qBAAW,eAAX,CAAd;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAP,CAAN,CAAmBC,IAAnB,CAAwB,OAAxB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACI,EAAP,CAAN,CAAiBD,IAAjB,CAAsB,OAAtB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACK,SAAP,CAAN,CAAwBF,IAAxB,CAA6B,IAA7B;AACH,GALG,CAAJ;AAMAJ,EAAAA,IAAI,CAAC,wDAAD,EAA2D,MAAM;AACjE,UAAMC,KAAK,GAAG,qBAAW,cAAX,CAAd;AACAC,IAAAA,MAAM,CAACD,KAAK,CAACE,IAAP,CAAN,CAAmBC,IAAnB,CAAwB,OAAxB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACI,EAAP,CAAN,CAAiBD,IAAjB,CAAsB,OAAtB;AACAF,IAAAA,MAAM,CAACD,KAAK,CAACK,SAAP,CAAN,CAAwBF,IAAxB,CAA6B,KAA7B;AACH,GALG,CAAJ;AAMH,CArCO,CAAR","sourcesContent":["import { parseRange } from './cli'\n\ndescribe('parseRange', () => {\n    test('parses symmetric <sha1>...<sha2>', () => {\n        const range = parseRange('e9f569df...cd1f7cd6');\n        expect(range.from).toBe('e9f569df');\n        expect(range.to).toBe('cd1f7cd6');\n        expect(range.symmetric).toBe(true);\n    });\n    test('parses non-symmetric <sha1>..<sha2>', () => {\n        const range = parseRange('e9f569df..cd1f7cd6');\n        expect(range.from).toBe('e9f569df');\n        expect(range.to).toBe('cd1f7cd6');\n        expect(range.symmetric).toBe(false);\n    });\n    test('parses <sha1>', () => {\n        const range = parseRange('e9f569df');\n        expect(range.from).toBe('e9f569df');\n        expect(range.to).toBe('');\n        expect(range.symmetric).toBe(false);\n    });\n    test('invalid pattern ...', () => {\n        expect(() => parseRange('...')).toThrow(Error);\n    });\n    test('invalid pattern ..', () => {\n        expect(() => parseRange('..')).toThrow(Error);\n    });\n    test('parses versions with decimal and 3 in between versions', () => {\n        const range = parseRange('v1.23...v2.12');\n        expect(range.from).toBe('v1.23');\n        expect(range.to).toBe('v2.12');\n        expect(range.symmetric).toBe(true);\n    });\n    test('parses versions with decimal and 2 in between versions', () => {\n        const range = parseRange('v1.23..v2.12');\n        expect(range.from).toBe('v1.23');\n        expect(range.to).toBe('v2.12');\n        expect(range.symmetric).toBe(false);\n    });\n})\n"],"file":"cli.test.js"}